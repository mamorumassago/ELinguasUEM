/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package frames;

import dados.Aluno;
import dados.Curso;
import dados.Matricula;
import dados.Nivel;
import dados.Turma;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.ControladorDePersistencia;

/**
 *
 * @author Guilherme
 */
public class ConsultarAluno extends javax.swing.JFrame {

    ArrayList<Aluno> listaAlunoAtivo;
    ArrayList<Aluno> listaAluno;
    
    
    ArrayList<Turma> listaTurma;
    ArrayList<Curso> listaCurso;
    int selecionado;
    
    MenuPrincipal mp;
    Matricular mt;
    Rematricular rm;
    /**
     * Creates new form GerenciarNotas
     */
    public ConsultarAluno() {
        initComponents();
        this.reload();
        this.setLocationRelativeTo(null);
    }
    public ConsultarAluno(MenuPrincipal menu) {
        initComponents();
        selecionado = 1;
        mp = menu;
        this.setJCBoxCurso();
        this.setJCBoxTurma();
        this.reload();
        this.setLocationRelativeTo(null);
    }
    
    public ConsultarAluno(Matricular mat) {
        initComponents();
        selecionado = 2;
        mt = mat;
        this.setJCBoxCurso();
        this.setJCBoxTurma();
        this.reload();
        this.jButton3.setText("Selecionar");
        jButton4.setVisible(false);
        jButton4.setEnabled(false);
        this.setLocationRelativeTo(null);
    }
    
    public ConsultarAluno(Rematricular rem) {
        initComponents();
        selecionado = 3;
        rm = rem;
        this.setJCBoxCurso();
        this.setJCBoxTurma();
        this.reload();
        this.jButton3.setText("Selecionar");
        jButton4.setVisible(false);
        jButton4.setEnabled(false);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Consultar Aluno");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Aluno", "Idade", "Telefone", "Endere√ßo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Aluno:");

        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Turma:");

        jLabel5.setText("Curso:");

        jButton3.setText("Alterar Aluno");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Excluir Aluno");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("Idade:");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] {""}));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] {""  }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (selecionado == 1){
            mp.setEnabled(true);
        }
        if(selecionado == 2){
            mt.setEnabled(true);
        }
        if(selecionado == 3){
            rm.setEnabled(true);
        }
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(selecionado == 1){
            try{
                int posicaoSelecionado = this.jTable1.getSelectedRow();
                if(posicaoSelecionado < 0){
                    JOptionPane.showMessageDialog(this,"Nenhum aluno selecionado.","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Aluno a1 = new Aluno();
                a1.clonarAluno(listaAluno.get(posicaoSelecionado));
                CadastrarAluno f = new CadastrarAluno(this,a1);
                f.setVisible(true);
                this.setEnabled(false);
            }
            catch(Exception ex){

            }
        }
        if(selecionado == 2){
            try{
                int posicaoSelecionado = this.jTable1.getSelectedRow();
                if(posicaoSelecionado < 0){
                    JOptionPane.showMessageDialog(this,"Nenhum aluno selecionado.","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Aluno a1 = new Aluno();
                a1.clonarAluno(listaAluno.get(posicaoSelecionado));
                mt.setAluno(a1);
                mt.setEnabled(true);
                dispose();
            }
            catch(Exception ex){

            }
        }
        if(selecionado == 3){
            try{
                int posicaoSelecionado = this.jTable1.getSelectedRow();
                if(posicaoSelecionado < 0){
                    JOptionPane.showMessageDialog(this,"Nenhum aluno selecionado.","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Aluno a1 = new Aluno();
                a1.clonarAluno(listaAluno.get(posicaoSelecionado));
                rm.setAluno(a1);
                rm.setEnabled(true);
                dispose();
            }
            catch(Exception ex){

            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try{
            int posicaoSelecionado = this.jTable1.getSelectedRow();
            if(posicaoSelecionado < 0){
                JOptionPane.showMessageDialog(this,"Nenhum aluno selecionado.","Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            Aluno a1 = new Aluno();
            a1.clonarAluno(listaAluno.get(posicaoSelecionado));
            Excluir f = new Excluir(this,a1);
            f.setVisible(true);
            this.setEnabled(false);
        }
        catch(Exception ex){
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(formatar(jTextField1.getText().toString()).equals("")){
            if(jComboBox1.getSelectedIndex() == 0){
                if(jComboBox2.getSelectedIndex() == 0){
                    
                    if(formatar(jTextField5.getText().toString()).equals("")){
                        reload();
                        return;
                    }
                    
                }
            }
        }
        buscar();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
        // TODO add your handling code here:
        String caracteres="0987654321";
        if(!caracteres.contains(evt.getKeyChar()+"")){
            evt.consume();
        }
    }//GEN-LAST:event_jTextField5KeyTyped

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    public void buscar(){
        this.carregaBusca();
        this.listarAtivos();
    }
    
    public void setJCBoxTurma(){
        Vector vetor = new Vector();   
        listaTurma = new ArrayList<Turma>();
        try{
            ControladorDePersistencia con = new ControladorDePersistencia();
            listaTurma = con.carregaTurma();
        }
        catch(Exception ex){
            
        }
        vetor.add("");
        for(int i=0;i<listaTurma.size();i++){
            Turma t = listaTurma.get(i);
            vetor.add(t.getNome());
            
        }
         
        DefaultComboBoxModel model = new DefaultComboBoxModel(vetor);  
        jComboBox1.setModel(model);  
    }
    
    public void setJCBoxCurso(){
        Vector vetor = new Vector();   
        listaCurso = new ArrayList<Curso>();
        try{
            ControladorDePersistencia con = new ControladorDePersistencia();
            listaCurso = con.carregaCurso();
        }
        catch(Exception ex){
            
        }
        vetor.add("");
        for(int i=0;i<listaCurso.size();i++){
            Curso c = listaCurso.get(i);
            vetor.add(c.getNome());
            
        }
         
        DefaultComboBoxModel model = new DefaultComboBoxModel(vetor);  
        jComboBox2.setModel(model);  
    }
    
    public void carregaBusca(){
        String nomeAluno = formatar(jTextField1.getText().toString());
        
        int tSelect = jComboBox1.getSelectedIndex();
        int cSelect = jComboBox2.getSelectedIndex();
        
        Turma turmaq = new Turma();
        Curso cursoq = new Curso();
        if(tSelect != 0){
           turmaq.clonarTurma(listaTurma.get(tSelect-1));
        }
        if(cSelect != 0){
            cursoq.clonarCurso(listaCurso.get(cSelect-1));
        }
        
        String buscaIdade = formatar(jTextField5.getText().toString());
        listaAluno.clear();
        
        ArrayList<Curso> lcurso= new ArrayList<Curso>();
        ArrayList<Nivel> lnivel= new ArrayList<Nivel>();
        ArrayList<Turma> lturma = new ArrayList<Turma>();
        ArrayList<Matricula> lmatricula = new ArrayList<Matricula>();
        
        ArrayList<Matricula> matAluno = new ArrayList<Matricula>();
        
        try{
            ControladorDePersistencia con1 = new ControladorDePersistencia();
            lnivel = con1.carregaNivel();

            ControladorDePersistencia con2 = new ControladorDePersistencia();
            lmatricula = con2.carregaMatricula();

            ControladorDePersistencia con3 = new ControladorDePersistencia();
            lturma = con3.carregaTurma();
            
            for(Aluno a:listaAlunoAtivo){
                if(formatar(a.getNome().toUpperCase()).contains(formatar(nomeAluno.toUpperCase()))){
                    
                    if(formatar((""+a.getIdade()).toUpperCase()).contains(formatar(buscaIdade.toUpperCase()))){
                        
                        if(tSelect != 0 || cSelect != 0){
                            for (Matricula m1:lmatricula){
                                if(m1.getIdAluno() == a.getId()){
                                    if(tSelect != 0){
                                        if(cSelect != 0){
                                            if(m1.getIdTurma() == turmaq.getId()){
                                                if(turmaq.getIdCurso() == cursoq.getId()){
                                                    Aluno a1 = new Aluno();
                                                    a1.clonarAluno(a);
                                                    listaAluno.add(a1);
                                                }
                                            }
                                        }
                                        else{
                                            if(m1.getIdTurma() == turmaq.getId()){
                                                Aluno a1 = new Aluno();
                                                a1.clonarAluno(a);
                                                listaAluno.add(a1);
                                            }
                                        }
                                    }
                                    else{
                                        for(Turma tk :lturma){
                                            if(m1.getIdTurma() == tk.getId()){
                                                if(tk.getIdCurso() == cursoq.getId()){
                                                    Aluno a1 = new Aluno();
                                                    a1.clonarAluno(a);
                                                    listaAluno.add(a1);
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                        else{
                            Aluno a1 = new Aluno();
                            a1.clonarAluno(a);
                            listaAluno.add(a1);
                        }
                        
                        
                        
                            
                        
                        
                    }                    
                    
                    /*
                    Matricula matricula1 = new Matricula();
                    
                    Turma turma1 = new Turma();
                    Curso curso1 = new Curso();
                    Nivel nivel1 = new Nivel();
                    
                    for (Matricula m1: lmatricula){
                        if(m1.getIdAluno() == a.getId()){
                            curso1.clonarCurso(m1);
                        }
                    }
                    for (Curso c1: lcurso){
                        if(c1.getId() == a.getIdCurso()){
                            curso1.clonarCurso(c1);
                        }
                    }
                    for (Nivel n1:lnivel){
                        if(n1.getId() == t.getIdNivel()){
                            nivel1.clonarNivel(n1);
                        }
                    }
                    if(formatar(curso1.getNome().toUpperCase()).contains(formatar(nomeCursoBusca.toUpperCase()))){

                        if(formatar(nivel1.getNome().toUpperCase()).contains(formatar(nomeNivelBusca.toUpperCase()))){

                            Turma t1 = new Turma();
                            t1.clonarTurma(t);
                            listaTurma.add(t1);
                        }
                    }
                    
                    */
                    
                    
                    
                    
                }
            }
        }
        catch(Exception ex){
            
        }
        
    }
    
    public void reload(){
        this.carregaCurso();
        this.listarAtivos();
    }
    
    private void carregaCurso(){
        listaAlunoAtivo = new ArrayList<>();
        listaAluno = new ArrayList<Aluno>();
        try{
            ControladorDePersistencia con = new ControladorDePersistencia();            
            ArrayList<Aluno> lstA = con.carregaAluno();   
            for (Aluno a: lstA){
                if (a.getStatus() == 1){
                    listaAlunoAtivo.add(a);
                    this.listaAluno.add(a);

                    Collections.sort(listaAlunoAtivo, Aluno.AlunoNameComparator);
                    Collections.sort(listaAluno, Aluno.AlunoNameComparator);
                }
                
            }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    public void listarAtivos(){
        try{
            DefaultTableModel tabelaP = (DefaultTableModel)
            jTable1.getModel();
            tabelaP.setNumRows(0);
            for (Aluno a:listaAluno){
                tabelaP.addRow(new Object[]{
                                a.getNome(),
                                a.getIdade(),
                                a.getTelefone(),
                                a.getEndereco(),
                                
                                });

            }
            
        } catch (Exception e){
        }
    } 
    
    public String formatar(String s){
        String saida = "";
        for (int i=0;i<s.length();i++){
            if(s.charAt(i) != ' '){
                saida += s.charAt(i);
            }
        }
        return saida;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultarAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultarAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultarAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultarAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultarAluno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
