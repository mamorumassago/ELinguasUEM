/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package frames;

import dados.*;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.*;

/**
 *
 * @author Guilherme
 */
public class ConsultarFuncionario extends javax.swing.JFrame {

    private int tipo;
    private ArrayList<Funcionario> listaFuncionario;
    
    private ArrayList<Funcionario> listaFuncionarioAtivo;
    
    int selecionado;
    MenuPrincipal mp;
    
    InserirTurma it;
    /**
     * Creates new form CadastrarAluno
     */
    public ConsultarFuncionario() {
        initComponents();
        selecionado = 1;
        this.setLocationRelativeTo(null);
    }
    
    
    
    public ConsultarFuncionario(MenuPrincipal m,int tipo) {
        initComponents();
        selecionado = 1;
        mp = m;
        this.tipo = tipo;   
        if (tipo == 1){
            this.jLabel1.setText("Consultar Professor");
            this.jButton2.setText("Alterar Professor");
            this.jButton4.setText("Excluir Professor");
        }
        if (tipo == 2){
            this.jLabel1.setText("Consultar Secretário");
            this.jButton2.setText("Alterar Secretário");
            this.jButton4.setText("Excluir Secretário");
        }
        if (tipo == 3){
            selecionado = 3;
            this.jLabel1.setText("Consultar Auxiliar Geral");
            this.jButton2.setText("Alterar Auxiliar");
            this.jButton4.setText("Excluir Auxiliar");
        }
        this.carregaFuncionario();
        this.listarAtivos();
        this.setLocationRelativeTo(null);
    }
    
    public ConsultarFuncionario(InserirTurma it1) {
        initComponents();
        selecionado = 2;
        tipo = 1;
        it = it1;
        this.jLabel1.setText("Consultar Professor");
        this.jButton2.setText("Selecionar");
        this.jButton4.setEnabled(false);
        jButton4.setVisible(false);
        
        this.carregaFuncionario();
        this.listarAtivos();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Consultar Professor");

        jLabel2.setText("Nome:");

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Alterar Professor");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Endereco", "Telefone", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("Buscar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Excluir Professor");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(179, 179, 179))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(selecionado == 1){
            mp.setEnabled(true);
        }
        if(selecionado == 2){
            it.setEnabled(true);
        }
        if(selecionado == 3){
            mp.setEnabled(true);
        }
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (selecionado == 1){
            try{
                int posicaoSelecionado = this.jTable1.getSelectedRow();
                if(posicaoSelecionado < 0){
                    JOptionPane.showMessageDialog(this,"Nenhum funcionário selecionado.","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Funcionario f1 = new Funcionario();
                f1.clonarFuncionario(listaFuncionario.get(posicaoSelecionado));
                AlterarFuncionario f = new AlterarFuncionario(this,f1);
                f.setVisible(true);
                this.setEnabled(false);
            }
            catch(Exception ex){

            }
        }
        if (selecionado == 2){
            try{
                int posicaoSelecionado = this.jTable1.getSelectedRow();
                if(posicaoSelecionado < 0){
                    JOptionPane.showMessageDialog(this,"Nenhum funcionário selecionado.","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Funcionario f1 = new Funcionario();
                f1.clonarFuncionario(listaFuncionario.get(posicaoSelecionado));
                
                it.setProfessor(f1);
                it.setEnabled(true);
                dispose();
            }
            catch(Exception ex){

            }
        }
        if(selecionado == 3){
            try{
                int posicaoSelecionado = this.jTable1.getSelectedRow();
                if(posicaoSelecionado < 0){
                    JOptionPane.showMessageDialog(this,"Nenhum funcionário selecionado.","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Funcionario f1 = new Funcionario();
                f1.clonarFuncionario(listaFuncionario.get(posicaoSelecionado));
                CadastrarAuxiliarGeral cag = new CadastrarAuxiliarGeral(this,f1);
                cag.setVisible(true);
                this.setEnabled(false);
            }
            catch(Exception ex){

            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        try{
            int posicaoSelecionado = this.jTable1.getSelectedRow();
            if(posicaoSelecionado < 0){
                JOptionPane.showMessageDialog(this,"Nenhum funcionário selecionado.","Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            Funcionario f1 = new Funcionario();
            f1.clonarFuncionario(listaFuncionario.get(posicaoSelecionado));
            Excluir f = new Excluir(this,f1);
            f.setVisible(true);
            this.setEnabled(false);
        }
        catch(Exception ex){
            
        }
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        if(formatar(jTextField3.getText().toString()).equals("")){
            reload();
        }
        else{
            buscar();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void buscar(){
        this.carregaBusca();
        this.listarAtivos();
    }
    
    public void carregaBusca(){
        String nomeBusca = formatar(jTextField3.getText().toString());
        listaFuncionario.clear();
        for(Funcionario f:listaFuncionarioAtivo){
            if(formatar(f.getNome().toUpperCase()).contains(formatar(nomeBusca.toUpperCase()))){
                Funcionario f1 = new Funcionario();
                f1.clonarFuncionario(f);
                listaFuncionario.add(f1);
            }
        }
        
    }
    
    
    public String formatar(String s){
        String saida = "";
        for (int i=0;i<s.length();i++){
            if(s.charAt(i) != ' '){
                saida += s.charAt(i);
            }
        }
        return saida;
    }
    
    public void reload(){
        this.carregaFuncionario();
        this.listarAtivos();
    }
    
    private void carregaFuncionario(){
        listaFuncionarioAtivo = new ArrayList<>();
        listaFuncionario = new ArrayList<>();
        try{
            ControladorDePersistencia con = new ControladorDePersistencia();            
            ArrayList<Funcionario> lstF = con.carregaFuncionario();   
            for (Funcionario f:lstF){
                if(this.tipo < 3){
                    if(f.getTipo() == this.tipo){

                        if (f.getStatus() == 1){
                            listaFuncionarioAtivo.add(f);
                            this.listaFuncionario.add(f);

                            Collections.sort(listaFuncionarioAtivo, Funcionario.FuncNameComparator);
                            Collections.sort(listaFuncionario, Funcionario.FuncNameComparator);
                        }
                    }
                }
                else{
                    if(f.getTipo() > 2){

                        if (f.getStatus() == 1){
                            listaFuncionarioAtivo.add(f);
                            this.listaFuncionario.add(f);

                            Collections.sort(listaFuncionarioAtivo, Funcionario.FuncNameComparator);
                            Collections.sort(listaFuncionario, Funcionario.FuncNameComparator);
                        }
                    }
                }
                
            }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    public void listarAtivos(){
        try{
            DefaultTableModel tabelaP = (DefaultTableModel)
            jTable1.getModel();
            tabelaP.setNumRows(0);
            for (Funcionario f:listaFuncionario){
                tabelaP.addRow(new Object[]{
                                f.getNome(),
                                f.getEndereco(),
                                f.getTelefone(),
                                f.getEmail(),

                                });

            }
            
        } catch (Exception e){
        }
    } 
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultarFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultarFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultarFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultarFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultarFuncionario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
